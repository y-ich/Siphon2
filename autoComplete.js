// Generated by CoffeeScript 1.4.0

/*
# AutoComplete for CodeMirror in CoffeeScript
# (C) 2012 ICHIKAWA, Yuji (New 3 Rs)
*/


(function() {
  var AutoComplete, COFFEE_KEYWORDS, COMMON_KEYWORDS, CS_KEYWORDS_ASSIST, CS_OPERATORS, DATE_PROPERTIES, JS_KEYWORDS, JS_KEYWORDS_ASSIST, JS_OPERATORS, OPERATORS, OPERATORS_WITH_EQUAL, UTC_PROPERTIES, classes, csErrorLine, cs_keywords, cs_operators, e, functions, getDeclaredVariables, globalProperties, globalPropertiesPlusCSKeywords, globalPropertiesPlusJSKeywords, js_keywords, js_operators, variables, _i, _len, _ref;

  getDeclaredVariables = function(js) {
    var IDENTIFIER, IDENTIFIER_MAY_WITH_ASSIGN, match, regexp, result;
    IDENTIFIER = '[_A-Za-z$][_A-Za-z$0-9]*';
    IDENTIFIER_MAY_WITH_ASSIGN = IDENTIFIER + '\\s*(?:=\\s*\\S+)?';
    result = [];
    regexp = new RegExp("(?:^|;)\\s*(?:for\\s*\\(\\s*)?var\\s+((?:" + IDENTIFIER_MAY_WITH_ASSIGN + "\\s*,\\s*)*" + IDENTIFIER_MAY_WITH_ASSIGN + ")\\s*(?:;|$)", 'gm');
    while (match = regexp.exec(js)) {
      result = result.concat(match[1].split(/\s*,\s*/).map(function(e) {
        return e.replace(/\s*=.*$/, '');
      }));
    }
    return result;
  };

  csErrorLine = function(error) {
    var parse;
    parse = error.message.match(/Parse error on line (\d+): (.*)$/);
    return parseInt(parse[1]);
  };

  COMMON_KEYWORDS = ['break', 'catch', 'continue', 'debugger', 'delete', 'do', 'else', 'false', 'finally', 'for', 'if', 'in', 'instanceof', 'new', 'null', 'return', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'while'];

  JS_KEYWORDS = ['case', 'default', 'function', 'var', 'void', 'with'];

  COFFEE_KEYWORDS = ['by', 'class', 'extends', 'loop', 'no', 'of', 'off', 'on', 'super', 'then', 'undefined', 'unless', 'until', 'when', 'yes'];

  OPERATORS_WITH_EQUAL = ['-', '+', '*', '/', '%', '<<', '>>', '>>>', '<', '>', '&', '|', '^', '!', '='];

  OPERATORS = ['&&', '||', '~'];

  JS_OPERATORS = ['++', '--', '===', '!=='];

  CS_OPERATORS = ['->', '=>', 'and', 'or', 'is', 'isnt', 'not', '?', '?='];

  cs_operators = OPERATORS.concat(CS_OPERATORS).concat(OPERATORS_WITH_EQUAL.concat(OPERATORS_WITH_EQUAL.map(function(e) {
    return e + '=';
  }))).sort();

  js_operators = OPERATORS.concat(JS_OPERATORS).concat(OPERATORS_WITH_EQUAL.concat(OPERATORS_WITH_EQUAL.map(function(e) {
    return e + '=';
  }))).sort();

  UTC_PROPERTIES = ['Date', 'Day', 'FullYear', 'Hours', 'Milliseconds', 'Minutes', 'Month', 'Seconds'];

  DATE_PROPERTIES = ['Time', 'Year'].concat(UTC_PROPERTIES.reduce((function(a, b) {
    return a.concat([b, 'UTC' + b]);
  }), []));

  js_keywords = COMMON_KEYWORDS.concat(JS_KEYWORDS).sort();

  cs_keywords = COMMON_KEYWORDS.concat(COFFEE_KEYWORDS).sort();

  CS_KEYWORDS_ASSIST = {
    "class": ['extends'],
    "for": ['in', 'in when', 'of', 'of when'],
    "if": ['else', 'then else'],
    "switch": ['when else', 'when', 'when then else', 'when then'],
    "try": ['catch finally', 'catch']
  };

  JS_KEYWORDS_ASSIST = {
    "do": ['while ( )'],
    "for": ['( ; ; ) { }', '( in ) { }'],
    "if": ['( ) { }', '( ) { } else { }'],
    "switch": ['( ) { case : break; default: }'],
    "try": ['catch finally', 'catch'],
    "while": ['( )']
  };

  globalProperties = (function() {
    var _results;
    _results = [];
    for (e in window) {
      _results.push(e);
    }
    return _results;
  })();

  globalPropertiesPlusJSKeywords = globalProperties.concat(js_keywords).sort();

  globalPropertiesPlusCSKeywords = globalProperties.concat(cs_keywords).sort();

  variables = [];

  functions = [];

  classes = [];

  _ref = globalProperties.sort();
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    e = _ref[_i];
    if (window[e] === null || (typeof window[e] !== 'function' && /^[A-Z]/.test(e))) {
      continue;
    }
    if (typeof window[e] === 'function') {
      if (/^[A-Z]/.test(e)) {
        classes.push(e);
      } else {
        functions.push(e);
      }
    } else if (!/^[A-Z]/.test(e)) {
      variables.push(e);
    }
  }

  AutoComplete = (function() {

    AutoComplete.current = null;

    function AutoComplete(cm) {
      var cursor,
        _this = this;
      this.cm = cm;
      switch (this.cm.getOption('mode')) {
        case 'coffeescript':
          this.globalPropertiesPlusKeywords = globalPropertiesPlusCSKeywords;
          this.keywordsAssist = CS_KEYWORDS_ASSIST;
          break;
        case 'javascript':
          this.globalPropertiesPlusKeywords = globalPropertiesPlusJSKeywords;
          this.keywordsAssist = JS_KEYWORDS_ASSIST;
      }
      if (this.candidates != null) {
        return;
      }
      this.candidates = [];
      cursor = this.cm.getCursor();
      this.setCandidates_(cursor, function() {
        if (AutoComplete.current === _this && _this.candidates.length > 0) {
          _this.index = 0;
          _this.cm.replaceRange(_this.candidates[_this.index], cursor);
          _this.start = cursor;
          _this.end = _this.cm.getCursor();
          return _this.cm.setSelection(_this.start, _this.end);
        }
      });
      AutoComplete.current = this;
    }

    AutoComplete.prototype.previous = function() {
      return this.next_(-1);
    };

    AutoComplete.prototype.next = function() {
      return this.next_(1);
    };

    AutoComplete.prototype.next_ = function(increment) {
      var cursor;
      if (this.candidates.length > 1) {
        cursor = this.cm.getCursor();
        this.index += increment;
        if (this.index < 0) {
          this.index = this.candidates.length - 1;
        } else if (this.index >= this.candidates.length) {
          this.index = 0;
        }
        this.cm.replaceRange(this.candidates[this.index], this.start, this.end);
        this.end = this.cm.getCursor();
        return this.cm.setSelection(this.start, this.end);
      }
    };

    AutoComplete.prototype.setCandidates_ = function(cursor, continuation) {
      var bracketStack, breakFlag, candidates, key, object, pos, propertyChain, target, token, value, _j, _len1, _ref1,
        _this = this;
      propertyChain = [];
      pos = {};
      for (key in cursor) {
        value = cursor[key];
        pos[key] = value;
      }
      bracketStack = [];
      breakFlag = false;
      while (true) {
        token = this.cm.getTokenAt(pos);
        if (token.className === 'property') {
          propertyChain.push(token);
        } else if (token.className === 'variable' && bracketStack.length === 0) {
          propertyChain.push(token);
          breakFlag = true;
        } else {
          switch (token.string) {
            case ')':
            case '}':
            case ']':
              propertyChain.push(token);
              bracketStack.push(token.string);
              break;
            case '(':
              if (bracketStack.pop() === ')') {
                propertyChain.push(token);
              } else {
                breakFlag = true;
              }
              break;
            case '{':
              if (bracketStack.pop() === '}') {
                propertyChain.push(token);
              } else {
                breakFlag = true;
              }
              break;
            case '[':
              if (bracketStack.pop() === ']') {
                propertyChain.push(token);
              } else {
                breakFlag = true;
              }
              break;
            default:
              propertyChain.push(token);
          }
        }
        if (token.start > 0) {
          pos.ch = token.start;
        } else {
          if (pos.line > 0) {
            pos.line -= 1;
            pos.ch = this.cm.getLine(pos.line).length;
          } else {
            breakFlag = true;
          }
        }
        if (breakFlag) {
          break;
        }
      }
      propertyChain.reverse();
      if (propertyChain.length === 2 && /^\s+$/.test(propertyChain[1].string)) {
        if (this.keywordsAssist.hasOwnProperty(propertyChain[0].string)) {
          this.candidates = this.keywordsAssist[propertyChain[0].string];
        }
      } else if (propertyChain.length > 1 && /^\s+$/.test(propertyChain[propertyChain.length - 1].string) && propertyChain[propertyChain.length - 2].className === 'property') {

      } else if (propertyChain.length !== 0) {
        target = /^(\s*|\.)$/.test(propertyChain[propertyChain.length - 1].string) ? '' : propertyChain[propertyChain.length - 1].string;
        if (propertyChain.length === 1) {
          this.extractVariables_(function(variables) {
            var candidates;
            candidates = /^\s*$/.test(propertyChain[0].string) ? [] : _this.globalPropertiesPlusKeywords.concat(variables).sort();
            _this.candidates = candidates.filter(function(e) {
              return new RegExp('^' + target).test(e);
            }).map(function(e) {
              return e.slice(target.length);
            });
            return continuation();
          });
          return;
        } else {
          try {
            value = eval("(" + (propertyChain.map(function(e) {
              return e.string;
            }).join('').replace(/\..*?$/, '')) + ")");
            candidates = (function() {
              switch (typeof value) {
                case 'string':
                  return Object.getOwnPropertyNames(value.__proto__);
                case 'undefined':
                  return [];
                default:
                  object = new Object(value);
                  if (object instanceof Array) {
                    return Object.getOwnPropertyNames(Object.getPrototypeOf(object));
                  } else {
                    return Object.getOwnPropertyNames(Object.getPrototypeOf(object)).concat(Object.getOwnPropertyNames(object));
                  }
              }
            })();
            this.candidates = candidates.sort().filter(function(e) {
              return new RegExp('^' + target).test(e);
            }).map(function(e) {
              return e.slice(target.length);
            });
          } catch (error) {
            console.log(error);
            _ref1 = Object.getOwnPropertyNames(error);
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              key = _ref1[_j];
              console.log(key);
            }
          }
        }
      }
      return continuation();
    };

    AutoComplete.prototype.extractVariables_ = function(callback) {
      var cs, worker;
      if (this.cm.getOption('mode') === 'coffeescript') {
        cs = this.cm.getValue();
        worker = new Worker('coffee-script-worker.js');
        worker.onmessage = function(event) {
          var tmp;
          console.log(event);
          if (event.data.js != null) {
            return callback(getDeclaredVariables(event.data.js));
          } else {
            tmp = cs.split(/\r?\n/).slice(0, csErrorLine(event.data.error) - 1);
            cs = tmp.join('\n');
            worker.onmessage = function(event) {
              return callback(event.data.js != null ? getDeclaredVariables(event.data.js) : []);
            };
            return worker.postMessage({
              source: cs,
              options: {
                bare: true
              }
            });
          }
        };
        return worker.postMessage({
          source: cs,
          options: {
            bare: true
          }
        });
      } else {
        return callback(getDeclaredVariables(this.cm.getValue()));
      }
    };

    return AutoComplete;

  })();

  window.AutoComplete = AutoComplete;

}).call(this);
