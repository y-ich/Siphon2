// Generated by CoffeeScript 1.6.3
/*
# AutoComplete for CodeMirror in CoffeeScript
# (C) 2012 ICHIKAWA, Yuji (New 3 Rs)
*/


(function() {
  var AutoComplete, COMMON_KEYWORDS, CS_KEYWORDS_ASSIST, CS_ONLY_KEYWORDS, GLOBAL_PROPERTIES, GLOBAL_PROPERTIES_PLUS_CS_KEYWORDS, GLOBAL_PROPERTIES_PLUS_JS_KEYWORDS, JS_KEYWORDS_ASSIST, JS_ONLY_KEYWORDS, csErrorLine, e;

  COMMON_KEYWORDS = ['break', 'catch', 'continue', 'debugger', 'delete', 'do', 'else', 'false', 'finally', 'for', 'if', 'in', 'instanceof', 'new', 'null', 'return', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'while'];

  JS_ONLY_KEYWORDS = ['case', 'default', 'function', 'var', 'void', 'with'];

  CS_ONLY_KEYWORDS = ['by', 'class', 'extends', 'loop', 'no', 'of', 'off', 'on', 'super', 'then', 'undefined', 'unless', 'until', 'when', 'yes'];

  GLOBAL_PROPERTIES = (function() {
    var _results;
    _results = [];
    for (e in window) {
      _results.push(e);
    }
    return _results;
  })();

  GLOBAL_PROPERTIES_PLUS_JS_KEYWORDS = GLOBAL_PROPERTIES.concat(COMMON_KEYWORDS).concat(JS_ONLY_KEYWORDS).sort();

  GLOBAL_PROPERTIES_PLUS_CS_KEYWORDS = GLOBAL_PROPERTIES.concat(COMMON_KEYWORDS).concat(CS_ONLY_KEYWORDS).sort();

  CS_KEYWORDS_ASSIST = {
    "class": ['extends'],
    "for": ['in', 'in when', 'of', 'of when'],
    "if": ['else', 'then else'],
    "switch": ['when else', 'when', 'when then else', 'when then'],
    "try": ['catch finally', 'catch']
  };

  JS_KEYWORDS_ASSIST = {
    "do": ['while ( )'],
    "for": ['( ; ; ) { }', '( in ) { }'],
    "if": ['( ) { }', '( ) { } else { }'],
    "switch": ['( ) { case : break; default: }'],
    "try": ['catch finally', 'catch'],
    "while": ['( )']
  };

  csErrorLine = function(error) {
    var parse;
    if (parse = error.message.match(/Parse error on line (\d+): (.*)$/)) {
      return parseInt(parse[1]);
    } else {
      return null;
    }
  };

  AutoComplete = (function() {
    function AutoComplete(cm, variables) {
      this.cm = cm;
      this.variables = variables != null ? variables : null;
      switch (this.cm.getOption('mode')) {
        case 'javascript':
          this.globalPropertiesPlusKeywords = GLOBAL_PROPERTIES_PLUS_JS_KEYWORDS;
          this.keywordsAssist = JS_KEYWORDS_ASSIST;
          break;
        case 'coffeescript':
          this.globalPropertiesPlusKeywords = GLOBAL_PROPERTIES_PLUS_CS_KEYWORDS;
          this.keywordsAssist = CS_KEYWORDS_ASSIST;
          break;
        default:
          return;
      }
      this.start = this.cm.getCursor();
      this.setCandidates_(this.getPropertyChain_());
      this.showFirstCandidate_();
    }

    AutoComplete.prototype.previous = function() {
      return this.next_(-1);
    };

    AutoComplete.prototype.next = function() {
      return this.next_(1);
    };

    AutoComplete.prototype.next_ = function(increment) {
      var cursor;
      if (this.candidates.length > 1) {
        cursor = this.cm.getCursor();
        this.index += increment;
        if (this.index < 0) {
          this.index = this.candidates.length - 1;
        } else if (this.index >= this.candidates.length) {
          this.index = 0;
        }
        this.cm.replaceRange(this.candidates[this.index], this.start, this.end);
        this.end = this.cm.getCursor();
        return this.cm.setSelection(this.start, this.end);
      }
    };

    AutoComplete.prototype.setCandidates_ = function(propertyChain) {
      var candidates, error, object, snippet, target, value, _ref;
      this.candidates = null;
      if (propertyChain.length === 0) {

      } else if (propertyChain.length === 2 && propertyChain[1].className === null && this.keywordsAssist.hasOwnProperty(propertyChain[0].string)) {
        return this.candidates = this.keywordsAssist[propertyChain[0].string];
      } else {
        target = propertyChain[propertyChain.length - 1].string;
        switch (propertyChain[propertyChain.length - 1].className) {
          case 'variable':
            candidates = this.globalPropertiesPlusKeywords.concat((_ref = this.variables) != null ? _ref : []);
            break;
          case 'property':
            try {
              snippet = "(" + (propertyChain.map(function(e) {
                return e.string;
              }).join('').replace(/\..*?$/, '')) + ")";
              if (/[_a-zA-Z$][_a-zA-Z$0-9]*\s*\(/.test(snippet)) {
                return;
              }
              value = eval(snippet);
              candidates = (function() {
                switch (typeof value) {
                  case 'undefined':
                    return [];
                  case 'string':
                    return Object.getOwnPropertyNames(value.__proto__);
                  default:
                    object = new Object(value);
                    if (object instanceof Array) {
                      return Object.getOwnPropertyNames(Object.getPrototypeOf(object));
                    } else {
                      return Object.getOwnPropertyNames(Object.getPrototypeOf(object)).concat(Object.getOwnPropertyNames(object));
                    }
                }
              })();
            } catch (_error) {
              error = _error;
              console.log(error);
              return;
            }
            break;
          default:
            return;
        }
        return this.candidates = candidates.sort().filter(function(e) {
          return new RegExp('^' + target).test(e);
        }).map(function(e) {
          return e.slice(target.length);
        });
      }
    };

    AutoComplete.prototype.getPropertyChain_ = function() {
      var bracketStack, breakFlag, key, pos, propertyChain, token, value, _ref;
      propertyChain = [];
      pos = {};
      _ref = this.start;
      for (key in _ref) {
        value = _ref[key];
        pos[key] = value;
      }
      bracketStack = [];
      breakFlag = false;
      while (true) {
        token = this.cm.getTokenAt(pos);
        if (token.className === 'property') {
          propertyChain.push(token);
        } else if (token.className === 'variable' && bracketStack.length === 0) {
          propertyChain.push(token);
          breakFlag = true;
        } else if (token.className !== 'comment') {
          switch (token.string) {
            case ')':
            case '}':
            case ']':
              propertyChain.push(token);
              bracketStack.push(token.string);
              break;
            case '(':
              if (bracketStack.pop() === ')') {
                propertyChain.push(token);
              } else {
                breakFlag = true;
              }
              break;
            case '{':
              if (bracketStack.pop() === '}') {
                propertyChain.push(token);
              } else {
                breakFlag = true;
              }
              break;
            case '[':
              if (bracketStack.pop() === ']') {
                propertyChain.push(token);
              } else {
                breakFlag = true;
              }
              break;
            default:
              propertyChain.push(token);
          }
        }
        if (token.start > 0) {
          pos.ch = token.start;
        } else {
          if (pos.line > 0) {
            pos.line -= 1;
            pos.ch = this.cm.getLine(pos.line).length;
          } else {
            breakFlag = true;
          }
        }
        if (breakFlag) {
          break;
        }
      }
      return propertyChain.reverse();
    };

    AutoComplete.prototype.showFirstCandidate_ = function() {
      if ((this.candidates != null) && this.candidates.length > 0) {
        this.index = 0;
        this.cm.replaceRange(this.candidates[this.index], this.start);
        this.end = this.cm.getCursor();
        return this.cm.setSelection(this.start, this.end);
      }
    };

    return AutoComplete;

  })();

  window.AutoComplete = AutoComplete;

}).call(this);
