// Generated by CoffeeScript 1.4.0

/*
# AutoComplete for CodeMirror in CoffeeScript
# (C) 2012 ICHIKAWA, Yuji (New 3 Rs)
*/


(function() {
  var API_KEY_FULL, API_KEY_SANDBOX, AutoComplete, COFFEE_KEYWORDS, CORE_CLASSES, DATE_PROPERTIES, JS_KEYWORDS, KEYWORDS, KEYWORDS_COMPLETE, OPERATORS, OPERATORS_WITH_EQUAL, UTC_PROPERTIES, buffer, classes, cm, config, dropbox, e, evalCS, ext2mode, fireKeyEvent, functions, getList, globalProperties, globalPropertiesPlusKeywords, i, key, keyboardHeight, lessParser, name, newCodeMirror, newTabAndEditor, parentFolders, showError, spinner, touchDevice, uploadFile, value, variables, _base, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;

  JS_KEYWORDS = ['true', 'false', 'null', 'this', 'new', 'delete', 'typeof', 'in', 'instanceof', 'return', 'throw', 'break', 'continue', 'debugger', 'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally', 'class', 'extends', 'super'];

  COFFEE_KEYWORDS = ['undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when', 'yes', 'no', 'on', 'off'];

  OPERATORS_WITH_EQUAL = ['-', '+', '*', '/', '%', '<', '>', '&', '|', '^', '!', '?', '='];

  OPERATORS = ['->', '=>', 'and', 'or', 'is', 'isnt', 'not', '&&', '||'];

  OPERATORS = OPERATORS.concat(OPERATORS_WITH_EQUAL.concat(OPERATORS_WITH_EQUAL.map(function(e) {
    return e + '=';
  }))).sort();

  UTC_PROPERTIES = ['Date', 'Day', 'FullYear', 'Hours', 'Milliseconds', 'Minutes', 'Month', 'Seconds'];

  DATE_PROPERTIES = ['Time', 'Year'].concat(UTC_PROPERTIES.reduce((function(a, b) {
    return a.concat([b, 'UTC' + b]);
  }), []));

  CORE_CLASSES = {
    Array: ['length', 'concat', 'every', 'filter', 'forEach', 'indexOf', 'join', 'lastIndexOf', 'map', 'pop', 'push', 'reduce', 'reduceRight', 'reverse', 'shift', 'slice', 'some', 'sort', 'splice', 'toLocaleString', 'toString', 'unshift'],
    Boolean: ['toString', 'valueOf'],
    Date: ['getTimezoneOffset', 'toDateString', 'toGMTString', 'toISOString', 'toJSON', 'toLocaleDateString', 'toLocaleString', 'toLocaleTimeString', 'toString', 'toTimeString', 'toUTCString', 'valueOf'].concat(DATE_PROPERTIES.reduce((function(a, b) {
      return a.concat(['get' + b, 'set' + b]);
    }), [])).sort(),
    Error: [],
    EvalError: [],
    Function: [],
    Global: [],
    JSON: [],
    Math: [],
    Number: [],
    Object: [],
    RangeError: [],
    ReferenceError: [],
    RegExp: [],
    String: [],
    SyntaxError: [],
    TypeError: [],
    URIError: []
  };

  KEYWORDS = JS_KEYWORDS.concat(COFFEE_KEYWORDS).sort();

  KEYWORDS_COMPLETE = {
    "if": ['else', 'then else'],
    "for": ['in', 'in when', 'of', 'of when'],
    "try": ['catch finally', 'catch'],
    "class": ['extends'],
    "switch": ['when else', 'when', 'when then else', 'when then']
  };

  globalProperties = (function() {
    var _results;
    _results = [];
    for (e in window) {
      _results.push(e);
    }
    return _results;
  })();

  globalPropertiesPlusKeywords = globalProperties.concat(KEYWORDS).sort();

  variables = [];

  functions = [];

  classes = [];

  _ref = globalProperties.sort();
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    e = _ref[_i];
    if (window[e] === null || (typeof window[e] !== 'function' && /^[A-Z]/.test(e))) {
      continue;
    }
    if (typeof window[e] === 'function') {
      if (/^[A-Z]/.test(e)) {
        classes.push(e);
      } else {
        functions.push(e);
      }
    } else if (!/^[A-Z]/.test(e)) {
      variables.push(e);
    }
  }

  AutoComplete = (function() {

    function AutoComplete(cm, text) {
      this.cm = cm;
      this.char = text.charAt(text.length - 1);
    }

    AutoComplete.prototype.complete = function() {
      var candidates, cursor, key, object, pos, propertyChain, target, token;
      if (this.candidates != null) {
        return;
      }
      this.candidates = [];
      cursor = this.cm.getCursor();
      switch (this.cm.getOption('mode')) {
        case 'coffeescript':
          if (/[a-zA-Z_$\.]/.test(this.char)) {
            propertyChain = [];
            pos = cursor;
            while ((token = this.cm.getTokenAt(pos)).string.charAt(0) === '.') {
              propertyChain.push(token);
              pos = {
                line: cursor.line,
                ch: token.start - 1
              };
            }
            propertyChain.push(token);
            propertyChain.reverse();
            if (propertyChain.length === 1) {
              candidates = globalPropertiesPlusKeywords;
            } else {
              try {
                object = eval(propertyChain.map(function(e) {
                  return e.string;
                }).slice(0, -1).join());
                candidates = (function() {
                  var _results;
                  _results = [];
                  for (key in object) {
                    _results.push(key);
                  }
                  return _results;
                })();
              } catch (err) {
                console.log(err);
                candidates = [];
              }
            }
            target = propertyChain[propertyChain.length - 1].string.replace(/^\./, '');
            this.candidates = candidates.filter(function(e) {
              return new RegExp('^' + target).test(e);
            }).map(function(e) {
              return e.slice(target.length);
            });
          } else if (this.char === ' ') {
            token = this.cm.getTokenAt({
              line: cursor.line,
              ch: cursor.ch - 1
            });
            if (KEYWORDS_COMPLETE.hasOwnProperty(token.string)) {
              this.candidates = KEYWORDS_COMPLETE[token.string];
            }
          }
      }
      if (this.candidates.length > 0) {
        this.index = 0;
        this.cm.replaceRange(this.candidates[this.index], cursor);
        this.start = cursor;
        this.end = this.cm.getCursor();
        return this.cm.setSelection(this.start, this.end);
      }
    };

    AutoComplete.prototype.previous = function() {
      return this.next_(-1);
    };

    AutoComplete.prototype.next = function() {
      return this.next_(1);
    };

    AutoComplete.prototype.next_ = function(increment) {
      var cursor;
      if (this.candidates.length > 1) {
        cursor = this.cm.getCursor();
        this.index += increment;
        if (this.index < 0) {
          this.index = this.candidates.length - 1;
        } else if (this.index >= this.candidates.length) {
          this.index = 0;
        }
        this.cm.replaceRange(this.candidates[this.index], this.start, this.end);
        this.end = this.cm.getCursor();
        return this.cm.setSelection(this.start, this.end);
      }
    };

    return AutoComplete;

  })();

  /*
  # (C) 2012 New 3 Rs (ICHIKAWA, Yuji)
  */


  API_KEY_FULL = 'iHaFSTo2hqA=|lC0ziIxBPWaNm/DX+ztl4p1RdqPQI2FAwofDEmJsiQ==';

  API_KEY_SANDBOX = 'CCdH9UReG2A=|k8J5QIsJKiBxs2tvP5WxPZ5jhjIhJ1GS0sbPdv3xxw==';

  ext2mode = function(str) {
    var exts, _ref1;
    exts = {
      c: 'clike',
      cc: 'clike',
      clj: 'clojure',
      coffee: 'coffeescript',
      cpp: 'clike',
      css: 'css',
      erl: 'erlang',
      h: 'clike',
      hs: 'haskell',
      htm: 'htmlmixed',
      html: 'htmlmixed',
      hx: 'haxe',
      md: 'markdown',
      ml: 'ocaml',
      java: 'clike',
      js: 'javascript',
      lisp: 'commonlisp',
      pas: 'pascal',
      pl: 'perl',
      py: 'python',
      rb: 'ruby',
      scm: 'scheme',
      sh: 'shell',
      st: 'smalltalk',
      tex: 'stex'
    };
    return (_ref1 = exts[str]) != null ? _ref1 : str.toLowerCase();
  };

  newCodeMirror = function(tabAnchor, options, active) {
    var $wrapper, defaultOptions, key, result, value, _ref1;
    defaultOptions = {
      lineNumbers: true,
      lineWrapping: true,
      onBlur: function() {
        return $('.navbar-fixed-bottom').css('bottom', '');
      },
      onChange: function(cm, change) {
        if (cm.siphon.timer != null) {
          clearTimeout(cm.siphon.timer);
        }
        cm.siphon.timer = setTimeout((function() {
          var path, _ref1;
          if ($(tabAnchor).data('dropbox') != null) {
            path = $(tabAnchor).data('dropbox').path;
          } else if ($(tabAnchor).children('span').text() !== 'untitled') {
            path = $(tabAnchor).children('span').text();
          } else {
            return;
          }
          localStorage["siphon-buffer-" + path] = JSON.stringify({
            title: $(tabAnchor).children('span').text(),
            text: cm.getValue(),
            dropbox: (_ref1 = $(tabAnchor).data('dropbox')) != null ? _ref1 : null
          });
          return cm.siphon.timer = null;
        }), config.autoSaveTime);
        if (!(cm.siphon.autoComplete != null) && change.text.length === 1 && change.text[0].length === 1) {
          cm.siphon.autoComplete = new AutoComplete(cm, change.text[change.text.length - 1]);
          return cm.siphon.autoComplete.complete(cm);
        }
      },
      onFocus: function() {
        return $('.navbar-fixed-bottom').css('bottom', "" + (keyboardHeight(config)) + "px");
      },
      onKeyEvent: function(cm, event) {
        switch (event.type) {
          case 'keydown':
            return cm.siphon.autoComplete = null;
        }
      },
      theme: 'blackboard'
    };
    if (options == null) {
      options = {};
    }
    for (key in defaultOptions) {
      value = defaultOptions[key];
      if ((_ref1 = options[key]) == null) {
        options[key] = value;
      }
    }
    if (!touchDevice) {
      options.onBlur = null;
      options.onFocus = null;
    }
    result = CodeMirror($('#editor-pane')[0], options);
    $wrapper = $(result.getWrapperElement());
    $wrapper.attr('id', "cm" + newCodeMirror.number);
    $wrapper.addClass('tab-pane');
    if (active) {
      $('#editor-pane .CodeMirror').removeClass('active');
      $wrapper.addClass('active');
    }
    newCodeMirror.number += 1;
    result.siphon = {};
    $(tabAnchor).data('editor', result);
    /* CodeMirror 3
    CodeMirror.on result, 'change', (cm, change)->
        if change.origin is 'input'
            cm.siphon.autoComplete = new AutoComplete cm, change.text[change.text.length - 1]
            cm.siphon.autoComplete.complete cm
    */

    return result;
  };

  newCodeMirror.number = 0;

  getList = function(path) {
    var $table;
    $table = $('#download-modal table');
    spinner.spin(document.body);
    return dropbox.readdir(path, null, function(error, names, stat, stats) {
      var $tr, _j, _len1, _results;
      spinner.stop();
      $table.children().remove();
      if (error) {
        return alert(error);
      } else {
        _results = [];
        for (_j = 0, _len1 = stats.length; _j < _len1; _j++) {
          e = stats[_j];
          $tr = $("<tr><td>" + e.name + "</td></tr>");
          $tr.data('dropbox', e);
          _results.push($table.append($tr));
        }
        return _results;
      }
    });
  };

  uploadFile = function() {
    var $active, cm, compileDeferred, compiled, fileDeferred, filename, folder, mode, path, stat;
    $active = $('#file-tabs > li.active > a');
    stat = $active.data('dropbox');
    if (stat != null) {
      path = stat.path;
    } else {
      folder = $('#download-modal .breadcrumb > li.active > a').data('path');
      filename = prompt("Input file name. (current folder is " + folder + ".)", $active.children('span').text());
      if (!filename) {
        return;
      }
      $active.children('span').text(filename);
      cm = $active.data('editor');
      mode = ext2mode(filename.replace(/^.*\./, ''));
      cm.setOption('mode', mode);
      cm.setOption('extraKeys', mode === 'htmlmixed' ? CodeMirror.defaults.extraKeys : null);
      path = folder + '/' + filename;
    }
    fileDeferred = $.Deferred();
    dropbox.writeFile(path, $active.data('editor').getValue(), null, function(error, stat) {
      if (error) {
        alert(error);
      } else {
        $active.data('dropbox', stat);
      }
      return fileDeferred.resolve();
    });
    compileDeferred = $.Deferred();
    if (config.compile) {
      switch (path.replace(/^.*\./, '')) {
        case 'coffee':
          try {
            compiled = CoffeeScript.compile($active.data('editor').getValue());
            dropbox.writeFile(path.replace(/coffee$/, 'js'), compiled, null, function(error, stat) {
              if (error) {
                alert(error);
              }
              return compileDeferred.resolve();
            });
          } catch (error) {
            compileDeferred.resolve();
            alert(error);
          }
          break;
        case 'less':
          lessParser.parse($active.data('editor').getValue(), function(error, tree) {
            if (error != null) {
              compileDeferred.resolve();
              return alert("Line " + error.line + ": " + error.message);
            } else {
              return dropbox.writeFile(path.replace(/less$/, 'css'), tree.toCSS(), null, function(error, stat) {
                if (error) {
                  alert(error);
                }
                return compileDeferred.resolve();
              });
            }
          });
          break;
        default:
          compileDeferred.resolve();
      }
    } else {
      compileDeferred.resolve();
    }
    $.when(fileDeferred, compileDeferred).then(function() {
      return spinner.stop();
    });
    return spinner.spin(document.body);
  };

  fireKeyEvent = function(type, keyIdentifier, keyCode, charCode) {
    var DOM_KEY_LOCATION_STANDARD, KEY_CODES;
    if (charCode == null) {
      charCode = 0;
    }
    DOM_KEY_LOCATION_STANDARD = 0;
    KEY_CODES = {
      'Left': 37,
      'Right': 39,
      'Up': 38,
      'Down': 40,
      'U+0009': 9
    };
    e = document.createEvent('KeyboardEvent');
    e.initKeyboardEvent(type, true, true, window, keyIdentifier, DOM_KEY_LOCATION_STANDARD, '');
    e.override = {
      keyCode: keyCode != null ? keyCode : KEY_CODES[keyIdentifier],
      charCode: charCode
    };
    return document.activeElement.dispatchEvent(e);
  };

  evalCS = function(str) {
    var jssnippet, result;
    try {
      jssnippet = CoffeeScript.compile(str, {
        bare: true
      });
      result = eval(jssnippet);
    } catch (error) {
      result = error.message;
    }
    return result;
  };

  showError = function(error) {
    if (window.console) {
      console.error(error);
    }
    switch (error.status) {
      case 401:
        return null;
      case 404:
        return null;
      case 507:
        return null;
      case 503:
        return null;
      case 400:
        return null;
      case 403:
        return null;
      case 405:
        return null;
      default:
        return null;
    }
  };

  keyboardHeight = function(config) {
    var IPAD_KEYBOARD_HEIGHT, IPAD_SPLIT_KEYBOARD_HEIGHT;
    IPAD_KEYBOARD_HEIGHT = {
      portrait: 307,
      landscape: 395
    };
    IPAD_SPLIT_KEYBOARD_HEIGHT = {
      portrait: 283,
      landscape: 277
    };
    return ((function() {
      switch (config.keyboard) {
        case 'normal':
          return IPAD_KEYBOARD_HEIGHT;
        case 'split':
          return IPAD_SPLIT_KEYBOARD_HEIGHT;
        case 'user-defined':
          return config['user-defined-keyboard'];
      }
    })())[orientation % 180 === 0 ? 'portrait' : 'landscape'];
  };

  newTabAndEditor = function(title, mode) {
    var $tab, id, options;
    if (title == null) {
      title = 'untitled';
    }
    $('#file-tabs > li.active, #editor-pane > *').removeClass('active');
    newTabAndEditor.num += 1;
    id = "cm" + newTabAndEditor.num;
    $tab = $("<li class=\"active\">\n    <a href=\"#" + id + "\" data-toggle=\"tab\">\n        <button class=\"close\" type=\"button\">&times;</button>\n        <span>" + title + "</span>\n    </a>\n</li>");
    $('#file-tabs > li.dropdown').before($tab);
    options = {
      mode: mode
    };
    if (mode !== 'htmlmixed') {
      options.extraKeys = null;
    }
    return newCodeMirror($tab.children('a')[0], options, true);
  };

  newTabAndEditor.num = 0;

  parentFolders = function(path) {
    var i, split, _j, _len1, _results;
    split = path.split('/');
    _results = [];
    for (i = _j = 0, _len1 = split.length; _j < _len1; i = ++_j) {
      e = split[i];
      _results.push(split.slice(0, +i + 1 || 9e9).join('/'));
    }
    return _results;
  };

  touchDevice = (function() {
    try {
      document.createEvent('TouchEvent');
      return true;
    } catch (error) {
      return false;
    }
  })();

  if (!touchDevice) {
    $('#soft-key').css('display', 'none');
  }

  config = JSON.parse((_ref1 = localStorage['siphon-config']) != null ? _ref1 : '{}');

  if ((_ref2 = config.keyboard) == null) {
    config.keyboard = 'normal';
  }

  if ((_ref3 = config.compile) == null) {
    config.compile = false;
  }

  if ((_ref4 = config.dropbox) == null) {
    config.dropbox = {};
  }

  if ((_ref5 = (_base = config.dropbox).sandbox) == null) {
    _base.sandbox = true;
  }

  if (!(config.dropbox.currentFolder != null) || config.dropbox.currentFolder === '') {
    config.dropbox.currentFolder = '/';
  }

  if ((_ref6 = config.autoSaveTime) == null) {
    config.autoSaveTime = 10000;
  }

  newCodeMirror($('#file-tabs > li.active > a')[0], {
    extraKeys: null
  }, true);

  for (key in localStorage) {
    value = localStorage[key];
    if (!(/^siphon-buffer/.test(key))) {
      continue;
    }
    buffer = JSON.parse(value);
    cm = newTabAndEditor(buffer.title, ext2mode(buffer.title.replace(/^.*\./, '')));
    cm.setValue(buffer.text);
    if (buffer.dropbox != null) {
      $('#file-tabs > li.active > a').data('dropbox', buffer.dropbox);
    }
  }

  $("#setting input[name=\"keyboard\"][value=\"" + config.keyboard + "\"]").attr('checked', '');

  if (config['user-defined-keyboard'] != null) {
    $('#setting input[name="keyboard-height-portrait"]').value(config['user-defined-keyboard'].portrait);
    $('#setting input[name="keyboard-height-landscape"]').value(config['user-defined-keyboard'].landscape);
  }

  $("#setting input[name=\"sandbox\"][value=\"" + (config.dropbox.sandbox.toString()) + "\"]").attr('checked', '');

  if (config.compile) {
    $("#setting input[name=\"compile\"]").attr('checked', '');
  }

  _ref7 = parentFolders(config.dropbox.currentFolder);
  for (i = _j = 0, _len1 = _ref7.length; _j < _len1; i = ++_j) {
    e = _ref7[i];
    if (i === 0) {
      $('#download-modal .breadcrumb').append('<li><a href="#" data-path="/">Home</a></li>');
    } else {
      name = e.replace(/^.*\//, '');
      $('#download-modal .breadcrumb').append("<li>\n    <span class=\"divider\">/</span>\n    <a href=\"#\" data-path=\"" + e + "\">" + name + "</a>\n</li>");
    }
  }

  $('#download-modal .breadcrumb > li:last-child').addClass('active');

  spinner = new Spinner({
    color: '#fff'
  });

  dropbox = new Dropbox.Client({
    key: config.dropbox.sandbox ? API_KEY_SANDBOX : API_KEY_FULL,
    sandbox: config.dropbox.sandbox
  });

  dropbox.authDriver(new Dropbox.Drivers.Redirect({
    rememberUser: true
  }));

  if (!/not_approved=true/.test(location.toString())) {
    try {
      for (key in localStorage) {
        value = localStorage[key];
        if (!(/^dropbox-auth/.test(key) && JSON.parse(value).key === dropbox.oauth.key)) {
          continue;
        }
        $('#dropbox').button('loading');
        dropbox.authenticate(function(error, client) {
          if (error) {
            showError(error);
            return $('#dropbox').button('reset');
          } else {
            return $('#dropbox').button('signout');
          }
        });
        break;
      }
    } catch (error) {
      console.log(error);
    }
  }

  lessParser = new less.Parser();

  _ref8 = $('.navbar-fixed-bottom');
  for (_k = 0, _len2 = _ref8.length; _k < _len2; _k++) {
    e = _ref8[_k];
    new NoClickDelay(e, false);
  }

  $('#previous-button').on('click', function() {
    var _ref9;
    cm = $('#file-tabs > li.active > a').data('editor');
    if ((_ref9 = cm.siphon.autoComplete) != null) {
      _ref9.previous();
    }
    return cm.focus();
  });

  $('#next-button').on('click', function() {
    var _ref9;
    cm = $('#file-tabs > li.active > a').data('editor');
    if ((_ref9 = cm.siphon.autoComplete) != null) {
      _ref9.next();
    }
    return cm.focus();
  });

  $('a.new-tab-type').on('click', function() {
    newTabAndEditor('untitled', $(this).text().toLowerCase());
    $(this).parent().parent().prev().dropdown('toggle');
    return false;
  });

  $('#import').on('click', function() {
    return $('#file-picker').click();
  });

  $('#file-picker').on('change', function(event) {
    var filename, reader;
    filename = this.value.replace(/^.*\\/, '');
    reader = new FileReader();
    reader.onload = function() {
      var $active, mode;
      $active = $('#file-tabs > li.active > a');
      cm = $active.data('editor');
      if (cm.getValue() === '' && $active.children('span').text() === 'untitled') {
        $active.children('span').text(filename);
        mode = ext2mode(filename.replace(/^.*\./, ''));
        cm.setOption('mode', mode);
        cm.setOption('extraKeys', mode === 'htmlmixed' ? CodeMirror.defaults.extraKeys : null);
        return cm.setValue(reader.result);
      }
    };
    return reader.readAsText(event.target.files[0]);
  });

  $('#file-tabs').on('click', 'button.close', function() {
    var $first, $tabAnchor, $this;
    $this = $(this);
    $tabAnchor = $this.parent();
    if (confirm("Do you really delete \"" + ($tabAnchor.children('span').text()) + "\" locally?")) {
      cm = $tabAnchor.data('editor');
      if (cm.siphon.timer != null) {
        clearTimeout(cm.siphon.timer);
      }
      cm.siphon.timer = null;
      if ($tabAnchor.data('dropbox') != null) {
        localStorage.removeItem("siphon-buffer-" + ($tabAnchor.data('dropbox').path));
      } else if ($tabAnchor.children('span').text() !== 'untitled') {
        localStorage.removeItem("siphon-buffer-" + ($tabAnchor.children('span').text()));
      }
      if ($('#file-tabs > li:not(.dropdown)').length > 1) {
        $tabAnchor.data('editor', null);
        $tabAnchor.parent().remove();
        $(cm.getWrapperElement()).remove();
        $first = $('#file-tabs > li:first-child');
        $first.addClass('active');
        cm = $first.children('a').data('editor');
        $(cm.getWrapperElement().parentElement).addClass('active');
      } else {
        $tabAnchor.children('span').text('untitled');
        $tabAnchor.data('dropbox', null);
        cm.setValue('');
      }
      return cm.focus();
    }
  });

  $('#download-button').on('click', function() {
    return getList(config.dropbox.currentFolder);
  });

  $('#download-modal .breadcrumb').on('click', 'li:not(.active) > a', function() {
    var $this, path;
    $this = $(this);
    $this.parent().nextUntil().remove();
    $this.parent().addClass('active');
    path = $this.data('path');
    getList(path);
    config.dropbox.currentFolder = path;
    localStorage['siphon-config'] = JSON.stringify(config);
    return false;
  });

  $('#download-modal table').on('click', 'tr', function() {
    var $this, stat;
    $this = $(this);
    stat = $this.data('dropbox');
    if (stat.isFile) {
      $('#download-modal table tr').removeClass('info');
      return $this.addClass('info');
    } else if (stat.isFolder) {
      $('#download-modal .breadcrumb > li.active').removeClass('active');
      $('#download-modal .breadcrumb').append($("<li class=\"active\">\n    <span class=\"divider\">/</span>\n    <a href=\"#\" data-path=\"" + stat.path + "\"}>" + stat.name + "</a>\n</li>"));
      getList(stat.path);
      config.dropbox.currentFolder = stat.path;
      return localStorage['siphon-config'] = JSON.stringify(config);
    }
  });

  $('#open').on('click', function() {
    var stat;
    stat = $('#download-modal table tr.info').data('dropbox');
    if (stat != null ? stat.isFile : void 0) {
      dropbox.readFile(stat.path, null, function(error, string, stat) {
        var $active, extension;
        $active = $('#file-tabs > li.active > a');
        cm = $active.data('editor');
        extension = stat.name.replace(/^.*\./, '');
        if (cm.getValue() === '' && $active.children('span').text() === 'untitled') {
          $active.children('span').text(stat.name);
          cm.setOption('mode', (function() {
            switch (extension) {
              case 'html':
                return 'text/html';
              case 'css':
                return 'css';
              case 'js':
                return 'javascript';
              case 'coffee':
                return 'coffeescript';
              case 'less':
                return 'less';
              default:
                return null;
            }
          })());
          if (extension !== 'html') {
            cm.setOption('extraKeys', null);
          }
        } else {
          cm = newTabAndEditor(stat.name, (function() {
            switch (extension) {
              case 'js':
                return 'javascript';
              case 'coffee':
                return 'coffeescript';
              default:
                return extension;
            }
          })());
          $active = $('#file-tabs > li.active > a');
        }
        cm.setValue(string);
        $active.data('dropbox', stat);
        return spinner.stop();
      });
      return spinner.spin(document.body);
    }
  });

  $('#upload').on('click', function() {
    return uploadFile();
  });

  $('.key').on((touchDevice ? 'touchstart' : 'mousedown'), function() {
    return fireKeyEvent('keydown', $(this).data('identifier'));
  });

  $('.key').on((touchDevice ? 'touchend' : 'mouseup'), function() {
    return fireKeyEvent('keyup', $(this).data('identifier'));
  });

  $('#undo').on('click', function() {
    return $('#file-tabs > li.active > a').data('editor').undo();
  });

  $('#eval').on('click', function() {
    var line;
    cm = $('#file-tabs > li.active > a').data('editor');
    if (cm.getOption('mode') !== 'coffeescript') {
      return;
    }
    if (!cm.somethingSelected()) {
      line = cm.getCursor().line;
      cm.setSelection({
        line: line,
        ch: 0
      }, {
        line: line,
        ch: cm.getLine(line).length
      });
    }
    return cm.replaceSelection(evalCS(cm.getSelection()).toString());
  });

  $('#dropbox').on('click', function() {
    var $this;
    $this = $(this);
    if ($this.text() === 'sign-in') {
      $this.button('loading');
      dropbox.reset();
      dropbox.authenticate(function(error, client) {
        spinner.stop();
        if (error) {
          return showError(error);
        } else {
          return $this.button('signout');
        }
      });
    } else {
      dropbox.signOut(function(error) {
        spinner.stop();
        if (error) {
          showError(error);
          return alart('pass');
        } else {
          return $this.button('reset');
        }
      });
    }
    return spinner.spin(document.body);
  });

  window.addEventListener('orientationchange', (function() {
    if ($('.navbar-fixed-bottom').css('bottom') !== '0px') {
      return $('.navbar-fixed-bottom').css('bottom', "" + (keyboardHeight(config)) + "px");
    }
  }), false);

  window.addEventListener('scroll', (function() {
    if ((document.body.scrollLeft !== 0 || document.body.scrollTop !== 0) && $('.open').length === 0) {
      return scrollTo(0, 0);
    }
  }), false);

  $('#save-setting').on('click', function() {
    config.keyboard = $('#setting input[name="keyboard"]:checked').val();
    if (config.keyboard === 'user-defined') {
      config['user-defined-keyboard'] = {
        portrait: parseInt($('#setting input[name="keyboard-height-portrait"]').val()),
        landscape: parseInt($('#setting input[name="keyboard-height-landscape"]').val())
      };
    }
    if (config.dropbox.sandbox.toString() !== $('#setting input[name="sandbox"]:checked').val()) {
      config.dropbox.sandbox = !config.dropbox.sandbox;
    }
    if ((typeof $('#setting input[name="compile"]').attr('checked') !== 'undefined') !== config.compile) {
      config.compile = !config.compile;
    }
    return localStorage['siphon-config'] = JSON.stringify(config);
  });

}).call(this);
