// Generated by CoffeeScript 1.4.0

/*
# (C) 2012 New 3 Rs (ICHIKAWA, Yuji)
*/


(function() {
  var API_KEY_FULL, API_KEY_SANDBOX, ancestorFolders, compareString, config, dateString, dropbox, evalCS, ext2mode, fireKeyEvent, foldFunction, footerHeight, getExtension, getList, initializeDropbox, initializeEventHandlers, isPortrait, keyboardHeight, lessParser, makeFileList, newCodeMirror, newTabAndEditor, restoreBuffer, restoreConfig, saveBuffer, showError, spinner, touchDevice, uploadFile;

  API_KEY_FULL = 'iHaFSTo2hqA=|lC0ziIxBPWaNm/DX+ztl4p1RdqPQI2FAwofDEmJsiQ==';

  API_KEY_SANDBOX = 'CCdH9UReG2A=|k8J5QIsJKiBxs2tvP5WxPZ5jhjIhJ1GS0sbPdv3xxw==';

  touchDevice = (function() {
    try {
      document.createEvent('TouchEvent');
      return true;
    } catch (error) {
      return false;
    }
  })();

  config = null;

  spinner = new Spinner({
    color: '#fff'
  });

  lessParser = new less.Parser();

  dropbox = null;

  dateString = function(date) {
    return date.toDateString().replace(/^.*? /, '') + ' ' + date.toTimeString().replace(/GMT.*$/, '');
  };

  getExtension = function(path) {
    if (/\./.test(path)) {
      return path.replace(/^.*\./, '');
    } else {
      return '';
    }
  };

  compareString = function(str1, str2) {
    if (str1 > str2) {
      return 1;
    } else if (str1 < str2) {
      return -1;
    } else {
      return 0;
    }
  };

  ext2mode = function(str) {
    var exts, _ref;
    exts = {
      c: 'clike',
      cc: 'clike',
      clj: 'clojure',
      coffee: 'coffeescript',
      cpp: 'clike',
      css: 'css',
      erl: 'erlang',
      h: 'clike',
      hs: 'haskell',
      htm: 'htmlmixed',
      html: 'htmlmixed',
      hx: 'haxe',
      md: 'markdown',
      ml: 'ocaml',
      java: 'clike',
      js: 'javascript',
      less: 'less',
      lisp: 'commonlisp',
      pas: 'pascal',
      pl: 'perl',
      py: 'python',
      rb: 'ruby',
      scm: 'scheme',
      sh: 'shell',
      st: 'smalltalk',
      tex: 'stex'
    };
    return (_ref = exts[str]) != null ? _ref : str.toLowerCase();
  };

  newCodeMirror = function(id, options, title) {
    var $wrapper, defaultOptions, key, result, value, _ref;
    defaultOptions = {
      lineNumbers: true,
      lineWrapping: true,
      onBlur: newCodeMirror.onBlur,
      onChange: newCodeMirror.onChange,
      onCursorActivity: newCodeMirror.onCursorActivity,
      onFocus: newCodeMirror.onFocus,
      onKeyEvent: newCodeMirror.onKeyEvent,
      theme: 'blackboard'
    };
    if (options == null) {
      options = {};
    }
    for (key in defaultOptions) {
      value = defaultOptions[key];
      if ((_ref = options[key]) == null) {
        options[key] = value;
      }
    }
    options.onGutterClick = foldFunction(options.mode);
    result = CodeMirror($('#editor-pane')[0], options);
    $wrapper = $(result.getWrapperElement());
    $wrapper.attr('id', id);
    $wrapper.addClass('tab-pane');
    result.siphon = {
      title: title
    };
    return result;
  };

  newCodeMirror.onBlur = function() {
    $('#key-extension').css('display', '');
    if (touchDevice) {
      return scrollTo(0, 0);
    }
  };

  newCodeMirror.onChange = function(cm, change) {
    if (cm.siphon.error != null) {
      cm.setLineClass(cm.siphon.error, null, null);
    }
    cm.siphon.error = null;
    if (!(cm.siphon.autoComplete != null) && change.text.length === 1 && change.text[0].length === 1) {
      cm.siphon.autoComplete = new AutoComplete(cm);
    }
    if (cm.siphon.timer != null) {
      clearTimeout(cm.siphon.timer);
    }
    return cm.siphon.timer = setTimeout((function() {
      saveBuffer(cm);
      return cm.siphon.timer = null;
    }), config.autoSaveTime);
  };

  newCodeMirror.onCursorActivity = function() {
    return setTimeout((function() {
      return scrollTo(0, isPortrait() ? 0 : $('#header').outerHeight(true));
    }), 0);
  };

  newCodeMirror.onFocus = function() {
    $('#key-extension').css('display', 'block');
    if (touchDevice) {
      $('#key-extension').css('bottom', "" + (footerHeight(config)) + "px");
      return setTimeout((function() {
        return scrollTo(0, isPortrait() ? 0 : $('#header').outerHeight(true));
      }), 0);
    }
  };

  newCodeMirror.onKeyEvent = function(cm, event) {
    switch (event.type) {
      case 'keydown':
        return cm.siphon.autoComplete = null;
    }
  };

  foldFunction = function(mode) {
    switch (mode) {
      case 'clike':
      case 'clojure':
      case 'haxe':
      case 'java':
      case 'javascript':
      case 'commonlisp':
      case 'css':
      case 'less':
      case 'scheme':
        return CodeMirror.newFoldFunction(CodeMirror.braceRangeFinder);
      case 'htmlmixed':
        return CodeMirror.newFoldFunction(CodeMirror.tagRangeFinder);
      case 'coffeescript':
      case 'haskell':
      case 'ocaml':
        return CodeMirror.newFoldFunction(CodeMirror.indentRangeFinder);
      default:
        return null;
    }
  };

  saveBuffer = function(cm) {
    var path, _ref, _ref1, _ref2;
    path = cm.siphon['dropbox-stat'] != null ? cm.siphon['dropbox-stat'].path : cm.siphon.title !== 'untitled' ? cm.siphon.title : null;
    if (path == null) {
      return;
    }
    return localStorage["siphon-buffer-" + path] = JSON.stringify({
      title: (_ref = (_ref1 = cm.siphon['dropbox-stat']) != null ? _ref1.name : void 0) != null ? _ref : cm.siphon.title,
      text: cm.getValue().replace(/\t/g, new Array(cm.getOption('tabSize')).join(' ')),
      dropbox: (_ref2 = cm.siphon['dropbox-stat']) != null ? _ref2 : null
    });
  };

  getList = function(path) {
    spinner.spin(document.body);
    return dropbox.readdir(path, null, function(error, names, stat, stats) {
      spinner.stop();
      if (error) {
        return showError(error);
      } else {
        return makeFileList(stats, config.fileList.order, config.fileList.direction);
      }
    });
  };

  makeFileList = function(stats, order, direction) {
    var $table, $tr, e, _i, _len, _results;
    $table = $('#download-modal table');
    if (stats != null) {
      $table.data('dropbox', stats);
    } else {
      stats = $table.data('dropbox');
    }
    $table.children().remove();
    $tr = '<tr>' + ((function() {
      var _i, _len, _ref, _results;
      _ref = ['image', 'name', 'kind', 'date'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        _results.push("<th" + (order === e ? " class=\"" + direction + "\"" : '') + "><span>" + e + "</span></th>");
      }
      return _results;
    })()).join('') + '</tr>';
    $table.append($tr);
    stats = stats.sort(function(a, b) {
      var result;
      result = (function() {
        switch (order) {
          case 'name':
            return compareString(a.name, b.name);
          case 'kind':
            return compareString(getExtension(a.name), getExtension(b.name));
          case 'date':
            return a.modifiedAt.getTime() - b.modifiedAt.getTime();
        }
      })();
      return result * (direction === 'ascending' ? 1 : -1);
    });
    _results = [];
    for (_i = 0, _len = stats.length; _i < _len; _i++) {
      e = stats[_i];
      $tr = $("<tr><td><img src=\"img/dropbox-api-icons/16x16/" + e.typeIcon + ".gif\"></td><td>" + e.name + "</td><td>" + (getExtension(e.name)) + "</td><td>" + (dateString(e.modifiedAt)) + "</td></tr>");
      $tr.data('dropbox-stat', e);
      _results.push($table.append($tr));
    }
    return _results;
  };

  uploadFile = function() {
    var $active, cm, compileDeferred, compiled, fileDeferred, filename, folder, line, mode, oldname, parse, path, stat, _ref;
    $active = $('#file-tabs > li.active > a');
    cm = $active.data('editor');
    stat = cm.siphon['dropbox-stat'];
    if (stat != null) {
      path = stat.path;
    } else {
      folder = $('#download-modal .breadcrumb > li.active > a').data('path');
      oldname = (_ref = cm.siphon.title) != null ? _ref : 'untitled';
      filename = prompt("Input file name. (current folder is " + folder + ".)", oldname);
      if (!filename) {
        return;
      }
      cm.siphon.title = filename;
      mode = ext2mode(getExtension(filename));
      cm.setOption('mode', mode);
      cm.setOption('extraKeys', mode === 'htmlmixed' ? CodeMirror.defaults.extraKeys : null);
      cm.setOption('onGutterClick', foldFunction(mode));
      $active.children('span').text(filename);
      path = folder + '/' + filename;
    }
    fileDeferred = $.Deferred();
    dropbox.writeFile(path, $active.data('editor').getValue().replace(/\t/g, new Array(cm.getOption('tabSize')).join(' ')), null, function(error, stat) {
      if (error) {
        alert(error);
      } else {
        cm.siphon['dropbox-stat'] = stat;
        saveBuffer(cm);
        if (localStorage["siphon-buffer-" + oldname] != null) {
          localStorage.removeItem("siphon-buffer-" + oldname);
        }
      }
      return fileDeferred.resolve();
    });
    compileDeferred = $.Deferred();
    if (config.compile) {
      switch (getExtension(path)) {
        case 'coffee':
          try {
            compiled = CoffeeScript.compile($active.data('editor').getValue().replace(/\t/g, new Array(cm.getOption('tabSize')).join(' ')));
            dropbox.writeFile(path.replace(/coffee$/, 'js'), compiled, null, function(error, stat) {
              if (error) {
                console.log(error);
                alert(error);
              }
              return compileDeferred.resolve();
            });
          } catch (error) {
            parse = error.message.match(/Parse error on line (\d+): (.*)$/);
            line = parseInt(parse[1]) - 1;
            cm.setLineClass(line, 'cm-error', null);
            cm.siphon.error = line;
            alert(error);
            compileDeferred.resolve();
          }
          break;
        case 'less':
          lessParser.parse($active.data('editor').getValue().replace(/\t/g, new Array(cm.getOption('tabSize')).join(' ')), function(error, tree) {
            if (error != null) {
              compileDeferred.resolve();
              return alert("Line " + error.line + ": " + error.message);
            } else {
              return dropbox.writeFile(path.replace(/less$/, 'css'), tree.toCSS(), null, function(error, stat) {
                if (error) {
                  alert(error);
                }
                return compileDeferred.resolve();
              });
            }
          });
          break;
        default:
          compileDeferred.resolve();
      }
    } else {
      compileDeferred.resolve();
    }
    $.when(fileDeferred, compileDeferred).then(function() {
      return spinner.stop();
    });
    return spinner.spin(document.body);
  };

  fireKeyEvent = function(type, keyIdentifier, keyCode, charCode) {
    var DOM_KEY_LOCATION_STANDARD, KEY_CODES, e;
    if (charCode == null) {
      charCode = 0;
    }
    DOM_KEY_LOCATION_STANDARD = 0;
    KEY_CODES = {
      'Left': 37,
      'Right': 39,
      'Up': 38,
      'Down': 40,
      'U+0009': 9
    };
    e = document.createEvent('KeyboardEvent');
    e.initKeyboardEvent(type, true, true, window, keyIdentifier, DOM_KEY_LOCATION_STANDARD, '');
    e.override = {
      keyCode: keyCode != null ? keyCode : KEY_CODES[keyIdentifier],
      charCode: charCode
    };
    return document.activeElement.dispatchEvent(e);
  };

  evalCS = function(str) {
    var jssnippet, result;
    try {
      jssnippet = CoffeeScript.compile(str, {
        bare: true
      });
      result = eval(jssnippet);
    } catch (error) {
      result = error.message;
    }
    return result;
  };

  showError = function(error) {
    if (window.console) {
      console.error(error);
    }
    switch (error.status) {
      case 401:
        alert('Authentication is expired. Please sign-in again.');
        return $('#dropbox').button('reset');
      case 404:
        return alert('No such file or folder.');
      case 507:
        return alert('Your Dropbox seems full.');
      case 503:
        return alert('Dropbox seems busy. Please try again later.');
      case 400:
        return alert('Bad input parameter.');
      case 403:
        return alert('Please sign-in at first.');
      case 405:
        return alert('Request method not expected.');
      default:
        return alert('Sorry, there seems something wrong in software.');
    }
  };

  keyboardHeight = function(config) {
    var IPAD_KEYBOARD_HEIGHT, IPAD_SPLIT_KEYBOARD_HEIGHT;
    IPAD_KEYBOARD_HEIGHT = {
      portrait: 307,
      landscape: 395
    };
    IPAD_SPLIT_KEYBOARD_HEIGHT = {
      portrait: 283,
      landscape: 329
    };
    return ((function() {
      switch (config.keyboard) {
        case 'normal':
          return IPAD_KEYBOARD_HEIGHT;
        case 'split':
          return IPAD_SPLIT_KEYBOARD_HEIGHT;
        case 'user-defined':
          return config['user-defined-keyboard'];
      }
    })())[isPortrait() ? 'portrait' : 'landscape'];
  };

  footerHeight = function(config) {
    return keyboardHeight(config) - (isPortrait() ? 0 : $('#header').outerHeight(true));
  };

  newTabAndEditor = function(title, mode) {
    var $tab, cm, id, options;
    if (title == null) {
      title = 'untitled';
    }
    if (mode == null) {
      mode = null;
    }
    $('#file-tabs > li.active, #editor-pane > .active').removeClass('active');
    id = "cm" + newTabAndEditor.num;
    newTabAndEditor.num += 1;
    $tab = $("<li class=\"active\">\n    <a href=\"#" + id + "\" class=\"editor-anchor\" data-toggle=\"tab\">\n        <button class=\"close\" type=\"button\">&times;</button>\n        <span>" + title + "</span>\n    </a>\n</li>");
    $('#file-tabs > li.dropdown').before($tab);
    options = {
      mode: mode,
      tabSize: config.tabSize
    };
    if (mode !== 'htmlmixed') {
      options.extraKeys = null;
    }
    cm = newCodeMirror(id, options, title, true);
    $tab.children('a').data('editor', cm);
    $('#editor-pane .CodeMirror').removeClass('active');
    $(cm.getWrapperElement()).addClass('active');
    return cm;
  };

  newTabAndEditor.num = 0;

  ancestorFolders = function(path) {
    var e, i, split, _i, _len, _results;
    split = path.split('/');
    _results = [];
    for (i = _i = 0, _len = split.length; _i < _len; i = ++_i) {
      e = split[i];
      _results.push(split.slice(0, +i + 1 || 9e9).join('/'));
    }
    return _results;
  };

  isPortrait = function() {
    return (typeof orientation !== "undefined" && orientation !== null ? orientation : 0) % 180 === 0;
  };

  restoreConfig = function() {
    var defaultConfig, e, i, key, name, value, _i, _len, _ref, _ref1, _ref2;
    defaultConfig = {
      keyboard: 'normal',
      compile: false,
      dropbox: {
        sandbox: true,
        currentFolder: '/'
      },
      autoSaveTime: 10000,
      fileList: {
        order: 'name',
        direction: 'ascending'
      },
      tabSize: 4
    };
    config = JSON.parse((_ref = localStorage['siphon-config']) != null ? _ref : '{}');
    for (key in defaultConfig) {
      value = defaultConfig[key];
      if ((_ref1 = config[key]) == null) {
        config[key] = value;
      }
    }
    $("#setting input[name=\"tab-size\"]").val(config.tabSize.toString());
    $("#setting input[name=\"keyboard\"][value=\"" + config.keyboard + "\"]").attr('checked', '');
    if (config['user-defined-keyboard'] != null) {
      $('#setting input[name="keyboard-height-portrait"]').value(config['user-defined-keyboard'].portrait);
      $('#setting input[name="keyboard-height-landscape"]').value(config['user-defined-keyboard'].landscape);
    }
    $("#setting input[name=\"sandbox\"][value=\"" + (config.dropbox.sandbox.toString()) + "\"]").attr('checked', '');
    if (config.compile) {
      $("#setting input[name=\"compile\"]").attr('checked', '');
    }
    _ref2 = ancestorFolders(config.dropbox.currentFolder);
    for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
      e = _ref2[i];
      if (i === 0) {
        $('#download-modal .breadcrumb').append('<li><a href="#" data-path="/">Home</a></li>');
      } else {
        name = e.replace(/^.*\//, '');
        $('#download-modal .breadcrumb').append("<li>\n    <span class=\"divider\">/</span>\n    <a href=\"#\" data-path=\"" + e + "\">" + name + "</a>\n</li>");
      }
    }
    return $('#download-modal .breadcrumb > li:last-child').addClass('active');
  };

  restoreBuffer = function() {
    var buffer, cm, key, value, _results;
    _results = [];
    for (key in localStorage) {
      value = localStorage[key];
      if (!(/^siphon-buffer/.test(key))) {
        continue;
      }
      buffer = JSON.parse(value);
      cm = newTabAndEditor(buffer.title, ext2mode(getExtension(buffer.title)));
      cm.setValue(buffer.text);
      if (buffer.dropbox != null) {
        _results.push(cm.siphon['dropbox-stat'] = buffer.dropbox);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  initializeDropbox = function() {
    var e, key, value, _i, _len, _ref, _results;
    dropbox = new Dropbox.Client({
      key: config.dropbox.sandbox ? API_KEY_SANDBOX : API_KEY_FULL,
      sandbox: config.dropbox.sandbox
    });
    dropbox.authDriver(new Dropbox.Drivers.Redirect({
      rememberUser: true
    }));
    if (!/not_approved=true/.test(location.toString())) {
      try {
        for (key in localStorage) {
          value = localStorage[key];
          if (!(/^dropbox-auth/.test(key) && JSON.parse(value).key === dropbox.oauth.key)) {
            continue;
          }
          $('#dropbox').button('loading');
          dropbox.authenticate(function(error, client) {
            if (error) {
              showError(error);
              return $('#dropbox').button('reset');
            } else {
              return $('#dropbox').button('signout');
            }
          });
          break;
        }
      } catch (error) {
        console.log(error);
      }
    }
    _ref = $('#key-extension');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      _results.push(new NoClickDelay(e, false));
    }
    return _results;
  };

  initializeEventHandlers = function() {
    window.addEventListener('orientationchange', (function() {
      $('#key-extension').css('bottom', "" + (footerHeight(config)) + "px");
      if (isPortrait()) {
        $('.tabbable').removeClass('tabs-left');
      } else {
        $('.tabbable').addClass('tabs-left');
      }
      return scrollTo(0, !isPortrait() && $('CodeMirror :focus').length > 0 ? $('#header').outerHeight(true) : 0);
    }), false);
    /*
        window.addEventListener 'scroll', (->
            if (document.body.scrollLeft != 0 or document.body.scrollTop != 0) and $('.open').length == 0 then scrollTo 0, 0
        ), false
    */

    $('#plus-editor').on('touchstart', function() {
      return scrollTo(0, 0);
    });
    $('a.new-tab-type').on('click', function() {
      newTabAndEditor('untitled', ext2mode($(this).text().toLowerCase()));
      $(this).parent().parent().prev().dropdown('toggle');
      return false;
    });
    $('#import').on('click', function() {
      if ($(this).hasClass('disabled')) {
        return;
      }
      return $('#file-picker').click();
    });
    $('#file-picker').on('change', function(event) {
      var filename, reader;
      filename = this.value.replace(/^.*\\/, '');
      reader = new FileReader();
      reader.onload = function() {
        var $active, cm, mode;
        $active = $('#file-tabs > li.active > a');
        cm = $active.data('editor');
        if (cm.getValue() === '' && $active.children('span').text() === 'untitled') {
          $active.children('span').text(filename);
          cm.siphon.title = filename;
          mode = ext2mode(getExtension(filename));
          cm.setOption('mode', mode);
          cm.setOption('extraKeys', mode === 'htmlmixed' ? CodeMirror.defaults.extraKeys : null);
          cm.setOption('onGutterClick', foldFunction(mode));
        } else {
          cm = newTabAndEditor(filename, ext2mode(getExtension(filename)));
        }
        return cm.setValue(reader.result);
      };
      return reader.readAsText(event.target.files[0]);
    });
    $('#file-tabs').on('click', 'button.close', function() {
      var $first, $tabAnchor, $this, cm;
      $this = $(this);
      $tabAnchor = $this.parent();
      if (confirm("Do you really delete \"" + ($tabAnchor.children('span').text()) + "\" locally?")) {
        cm = $tabAnchor.data('editor');
        if (cm.siphon.timer != null) {
          clearTimeout(cm.siphon.timer);
        }
        cm.siphon.timer = null;
        if (cm.siphon['dropbox-stat'] != null) {
          localStorage.removeItem("siphon-buffer-" + cm.siphon['dropbox-stat'].path);
        } else if ($tabAnchor.children('span').text() !== 'untitled') {
          localStorage.removeItem("siphon-buffer-" + ($tabAnchor.children('span').text()));
        }
        if ($('#file-tabs > li:not(.dropdown)').length > 1) {
          $tabAnchor.data('editor', null);
          $tabAnchor.parent().remove();
          $(cm.getWrapperElement()).remove();
          $first = $('#file-tabs > li:first-child');
          $first.addClass('active');
          cm = $first.children('a').data('editor');
          $(cm.getWrapperElement()).addClass('active');
        } else {
          $tabAnchor.children('span').text('untitled');
          cm.siphon['dropbox-stat'] = null;
          cm.setValue('');
        }
        return cm.focus();
      }
    });
    $('#download-button').on('click', function() {
      return getList(config.dropbox.currentFolder);
    });
    $('#download-modal .breadcrumb').on('click', 'li:not(.active) > a', function() {
      var $this, path;
      $this = $(this);
      $this.parent().nextUntil().remove();
      $this.parent().addClass('active');
      path = $this.data('path');
      getList(path);
      config.dropbox.currentFolder = path;
      localStorage['siphon-config'] = JSON.stringify(config);
      return false;
    });
    $('#download-modal table').on('click', 'tr', function() {
      var $this, stat;
      $this = $(this);
      stat = $this.data('dropbox-stat');
      if (!(stat != null)) {
        return;
      }
      if (stat.isFile) {
        $('#download-modal table tr').removeClass('info');
        return $this.addClass('info');
      } else if (stat.isFolder) {
        $('#download-modal .breadcrumb > li.active').removeClass('active');
        $('#download-modal .breadcrumb').append($("<li class=\"active\">\n    <span class=\"divider\">/</span>\n    <a href=\"#\" data-path=\"" + stat.path + "\"}>" + stat.name + "</a>\n</li>"));
        getList(stat.path);
        config.dropbox.currentFolder = stat.path;
        return localStorage['siphon-config'] = JSON.stringify(config);
      }
    });
    $('#open').on('click', function() {
      var $tabs, stat;
      stat = $('#download-modal table tr.info').data('dropbox-stat');
      if (stat != null ? stat.isFile : void 0) {
        $tabs = $('#file-tabs > li > a.editor-anchor').filter(function() {
          var _ref;
          return ((_ref = $(this).data('editor').siphon['dropbox-stat']) != null ? _ref.path : void 0) === stat.path;
        });
        if ($tabs.length > 0 && !confirm("There is a buffer editing. Do you want to discard a content of the buffer and update to the server's?")) {
          $tabs = null;
        }
        dropbox.readFile(stat.path, null, function(error, string, stat) {
          var $active, cm, e, extension, _i, _len;
          if (($tabs != null) && $tabs.length > 0) {
            for (_i = 0, _len = $tabs.length; _i < _len; _i++) {
              e = $tabs[_i];
              $(e).trigger('click');
              $(e).data('editor').setValue(string);
              $(e).data('editor').siphon['dropbox-stat'] = stat;
            }
          } else {
            $active = $('#file-tabs > li.active > a');
            cm = $active.data('editor');
            extension = getExtension(stat.name);
            if (cm.getValue() === '' && $active.children('span').text() === 'untitled') {
              $active.children('span').text(stat.name);
              cm.setOption('mode', ext2mode(extension));
              if (extension !== 'htmlmixed') {
                cm.setOption('extraKeys', null);
              }
              cm.setOption('onGutterClick', foldFunction(cm.getOption('mode')));
            } else {
              cm = newTabAndEditor(stat.name, ext2mode(extension));
              $active = $('#file-tabs > li.active > a');
            }
            cm.setValue(string);
            cm.siphon['dropbox-stat'] = stat;
            saveBuffer(cm);
            console.log('saved');
          }
          return spinner.stop();
        });
        return spinner.spin(document.body);
      }
    });
    $('#upload').on('click', function() {
      return uploadFile();
    });
    $('#dropbox').on('click', function() {
      var $this;
      $this = $(this);
      if ($this.text() === 'sign-in') {
        $this.button('loading');
        dropbox.reset();
        dropbox.authenticate(function(error, client) {
          spinner.stop();
          if (error) {
            return showError(error);
          } else {
            return $this.button('signout');
          }
        });
      } else {
        dropbox.signOut(function(error) {
          spinner.stop();
          if (error) {
            showError(error);
            return alart('pass');
          } else {
            return $this.button('reset');
          }
        });
      }
      return spinner.spin(document.body);
    });
    $('#save-setting').on('click', function() {
      var e, _i, _len, _ref;
      config.keyboard = $('#setting input[name="keyboard"]:checked').val();
      if (config.keyboard === 'user-defined') {
        config['user-defined-keyboard'] = {
          portrait: parseInt($('#setting input[name="keyboard-height-portrait"]').val()),
          landscape: parseInt($('#setting input[name="keyboard-height-landscape"]').val())
        };
      }
      if (config.dropbox.sandbox.toString() !== $('#setting input[name="sandbox"]:checked').val()) {
        config.dropbox.sandbox = !config.dropbox.sandbox;
      }
      if ((typeof $('#setting input[name="compile"]').attr('checked') !== 'undefined') !== config.compile) {
        config.compile = !config.compile;
      }
      config.tabSize = parseInt($('#setting input[name="tab-size"]').val());
      _ref = $('#file-tabs > li:not(.dropdown) > a');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        $(e).data('editor').setOption('tabSize', config.tabSize);
      }
      return localStorage['siphon-config'] = JSON.stringify(config);
    });
    (function() {
      var find, query, searchCursor;
      searchCursor = null;
      query = null;
      find = function(method) {
        var cm, pos;
        if (!(searchCursor != null)) {
          cm = $('#file-tabs > .active > a').data('editor');
          query = $('#search > input[name="query"]').val();
          searchCursor = cm.getSearchCursor(query, cm.getCursor(), false);
        }
        if (searchCursor[method]()) {
          searchCursor.cm.setSelection(searchCursor.from(), searchCursor.to());
          pos = searchCursor.cm.cursorCoords(true, 'local');
          return searchCursor.cm.scrollTo(0, pos.y - ($(searchCursor.cm.getScrollerElement()).height() - keyboardHeight(config)) / 2);
        } else {
          return alert("No more \"" + query + "\"");
        }
      };
      $('#search').on('change', function() {
        return searchCursor = null;
      });
      $('#search').on('submit', function() {
        find('findNext');
        return false;
      });
      $('#search-backward').on('click', function() {
        return find('findPrevious');
      });
      return $('#search-forward').on('click', function() {
        return find('findNext');
      });
    })();
    $('.key').on((touchDevice ? 'touchstart' : 'mousedown'), function() {
      return fireKeyEvent('keydown', $(this).data('identifier'));
    });
    $('.key').on((touchDevice ? 'touchend' : 'mouseup'), function() {
      return fireKeyEvent('keyup', $(this).data('identifier'));
    });
    $('#undo').on('click', function() {
      return $('#file-tabs > li.active > a').data('editor').undo();
    });
    $('#eval, #previous-button, #next-button').on('mousedown', function(event) {
      return event.preventDefault();
    });
    $('#eval').on('click', function() {
      var cm, evalFunction, line, result;
      cm = $('#file-tabs > li.active > a').data('editor');
      switch (cm.getOption('mode')) {
        case 'coffeescript':
          evalFunction = evalCS;
          break;
        case 'javascript':
          evalFunction = eval;
          break;
        default:
          return;
      }
      if (!cm.somethingSelected()) {
        line = cm.getCursor().line;
        cm.setSelection({
          line: line,
          ch: 0
        }, {
          line: line,
          ch: cm.getLine(line).length
        });
      }
      result = evalFunction(cm.getSelection());
      if (result != null) {
        return cm.replaceSelection(result.toString());
      }
    });
    $('#previous-button').on('click', function() {
      var cm, _ref;
      cm = $('#file-tabs > li.active > a').data('editor');
      if ((_ref = cm.siphon.autoComplete) != null) {
        _ref.previous();
      }
      return cm.focus();
    });
    $('#next-button').on('click', function() {
      var cm, _ref;
      cm = $('#file-tabs > li.active > a').data('editor');
      if ((_ref = cm.siphon.autoComplete) != null) {
        _ref.next();
      }
      return cm.focus();
    });
    return $('#download-modal table').on('click', 'tr > th:not(:first)', function() {
      var $this;
      $this = $(this);
      if ($this.hasClass('ascending')) {
        config.fileList.direction = 'descending';
      } else if ($this.hasClass('descending')) {
        config.fileList.direction = 'ascending';
      } else {
        config.fileList.order = $this.children('span').text();
        config.fileList.direction = 'ascending';
      }
      return makeFileList(null, config.fileList.order, config.fileList.direction);
    });
  };

  if (!isPortrait()) {
    $('.tabbable').addClass('tabs-left');
  }

  if (touchDevice) {
    $('#soft-key').css('display', 'block');
  }

  if (/iPad|iPhone/.test(navigator.userAgent)) {
    $('#import').addClass('disabled');
  }

  restoreConfig();

  newTabAndEditor('untitled', 'coffeescript');

  restoreBuffer();

  initializeDropbox();

  initializeEventHandlers();

  scrollTo(0, 0);

}).call(this);
